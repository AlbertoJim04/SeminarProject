# -*- coding: utf-8 -*-
"""RandomForrest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z9r_Q5zXj-R1fh-K3oUUpFKTXpwmCeXQ
"""

#Import all Libraries 
import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier

#import our dataset
df = pd.read_csv('/content/drive/MyDrive/Seminar/D2.csv')
print(df)

#sizes = df['clas'].value_counts(sort = 1)
#print(sizes)

#Define our Y , in this case is "clas" our diagnosis, and convert to int
Y = df["clas"].values 
#Y=Y.astype('int')

#Define our independent variables X, WHICH is all features 
X = df.drop(labels = ["clas"], axis=1)  
print(X)

#Split our data into training and testing. Random state to be the same test data set
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=20)
print(X_test)
print(X_train)
print(y_test)
print(y_train)

#Build the model for the classifier function, .fit to train the data vlaues 
model = RandomForestClassifier(n_estimators = 10, random_state = 20)
model.fit(X_train, y_train)

#prediction for the data training on x_test data , using our model. and compare with y_test 
prediction_test = model.predict(X_test)
print(y_test, prediction_test)

#Prints accuracy of our model by using the metrics library, compares our test
print ("Accuracy = ", metrics.accuracy_score(y_test, prediction_test))

#What parameters are contributing the best, based on our model 
importances = list(model.feature_importances_)
feature_list = list(X.columns)
feature_imp = pd.Series(model.feature_importances_,index=feature_list).sort_values(ascending=False)
print(feature_imp)